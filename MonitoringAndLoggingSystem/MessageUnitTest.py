import unittest
import json
from Message import Message

# assertEquals(a, b, msg=None) a == b
# assertNotEqual(a, b, msg=None) a != b
# assertTrue(x) bool(x) is True
# assertFalse(x) bool(x) is False
# assertIs(a, b) a is b
# assertIsNot(a, b) a is not b
# assertIsNone(x) x is None
# assertIsNotNone(x) x is not None
# assertIn(a, b) a in b
# assertNotIn(a, b) a not in b
# assertIsInstance(a, b) isinstance(a, b)
# assertNotIsInstance(a, b) not isinstance(a, b)
# assertRaises

def ConvertFromJSON(json_string):
    contents = json.loads(json_string)
    return Message(contents['CID'], contents['OID'], contents['DID'], contents['TTL'], contents['PLD'], contents['TS'], contents['UID'], contents['CKS'])

#This simulates sending a message. Note the absense of a checksum and uuid - this is autogenerated at the creation of the Message object
sendMessage = Message('car10393','CC','ML', 100, 'payload: This message format defined by subteams')
communication = sendMessage.ConvertToJSON()
#print(communication)

#This simulates recieving a message. Note the call to check the message checksum after it has been converted to an object
receivedMessage = ConvertFromJSON(communication)
#print(receivedMessage.ConvertToJSON())
#print(receivedMessage.TranslateTimestamp())
#print("The two checksums matched:", receivedMessage.CompareChecksum())


#subclass 
class MyTest(unittest.TestCase):
    def setUp(self):
        pass

    def test(self):
        self.assertEqual(receivedMessage.CompareChecksum(), True )

if __name__ == '__main__':
    unittest.main()

